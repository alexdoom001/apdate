#!/bin/bash
# Apply snort update

. `dirname $0`/unpackers-lib

DBDIR=/usr/share/suricata/rules
SERVICE=suricata
PRODUCT=idps

cmd=$1

patch_apply()
{
	TMPD=`mktemp -d /tmp/apdc-XXXXXX`
	BACKUP=`mktemp -d $DBPATH/backup-XXXXXX`

	set -e
	check_unpack_space "$patch" "$TMPD"
	cd $TMPD && zcat $patch | tar -x
	rm -f $patch
	check_delta_space "$TMPD/snort" "$DBDIR"
	if ! [ -f $TMPD/run ]; then
		apply_delta $DBDIR $TMPD/snort
	else
		cd $TMPD
		export APDATE_TMPD=$TMPD
		sudo -E /bin/bash $TMPD/run
	fi
	set +e
	#update active rules
	suriname=suricata
	perl -e "use lib '/opt/vyatta/share/perl5'; use Vyatta::Suricata::Rules; update_rule_files();"
	surimem=`ps -C $suriname -o rss --no-heading | awk '{s+=$1}END{print s}'`
	[ -z "$surimem" ] && surimem=0
	freemem=`free | sed -n 3p | awk '{print $4}'`
	if [ "$freemem" -gt "$surimem" ]; then
		# OK to fail if service isn't started
		killall -USR2 $SERVICE 2>/dev/null
	else
		#suricata consumes approximately double amount
		#of memory during rules reloading. We have not
		#enough memory => report about it
		logger -t suricata -p local1.warning \
		  "No free mem"
	fi
	ionice -c 3 nice rm -fr $TMPD $BACKUP &
}

case $cmd in
	apply)
		patch=$2
		if [ ! -f $patch ]; then
			echo "Bad patch file passed"
			exit 25
		fi
		patch_apply
		;;
	restore)
		std_backup_restore
		;;
	*)
		echo "Usage: $0 [apply|restore]"
		exit 3
		;;
esac

exit 0
